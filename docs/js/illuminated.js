!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i(t.illuminated={})}(this,function(t){"use strict";var x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e=function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")},s=function(){function n(t,i){for(var o=0;o<i.length;o++){var n=i[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(t,i,o){return i&&n(t.prototype,i),o&&n(t,o),t}}(),i=function(t,i){if("function"!=typeof i&&null!==i)throw new TypeError("Super expression must either be null or a function, not "+typeof i);t.prototype=Object.create(i&&i.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),i&&(Object.setPrototypeOf?Object.setPrototypeOf(t,i):t.__proto__=i)},a=function(t,i){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!i||"object"!=typeof i&&"function"!=typeof i?t:i},w=function(){function o(t,i){e(this,o),this.x=t||0,this.y=i||0}return s(o,[{key:"copy",value:function(){return new o(this.x,this.y)}},{key:"dot",value:function(t){return t.x*this.x+t.y*this.y}},{key:"sub",value:function(t){return new o(this.x-t.x,this.y-t.y)}},{key:"add",value:function(t){return new o(this.x+t.x,this.y+t.y)}},{key:"mul",value:function(t){return new o(this.x*t,this.y*t)}},{key:"inv",value:function(){return this.mul(-1)}},{key:"dist2",value:function(t){var i=this.x-t.x,o=this.y-t.y;return i*i+o*o}},{key:"normalize",value:function(){var t=Math.sqrt(this.length2());return new o(this.x/t,this.y/t)}},{key:"length2",value:function(){return this.x*this.x+this.y*this.y}},{key:"toString",value:function(){return this.x+","+this.y}},{key:"inBound",value:function(t,i){return t.x<this.x&&this.x<i.x&&t.y<this.y&&this.y<i.y}}]),o}(),o=(Math.PI,Math.sqrt(5),2*Math.PI);function v(t,i,o){var n=i[0];t.moveTo(n.x,n.y);for(var e=1,s=i.length;e<s;++e)n=i[e],t.lineTo(n.x,n.y);!o&&2<i.length&&(n=i[0],t.lineTo(n.x,n.y))}function r(t,i,o){var n="illujs_"+t,e=document.getElementById(n);null===e&&((e=document.createElement("canvas")).id=n,e.width=i,e.height=o,e.style.display="none",document.body.appendChild(e));var s=e.getContext("2d");return s.clearRect(0,0,e.width,e.height),e.width=i,e.height=o,{canvas:e,ctx:s,w:i,h:o}}var h=function(){var t=document.createElement("canvas");t.width=t.height=1;var n=t.getContext("2d");return function(t,i){n.clearRect(0,0,1,1),n.fillStyle=t,n.fillRect(0,0,1,1);var o=n.getImageData(0,0,1,1).data;return"rgba("+[o[0],o[1],o[2],i]+")"}}();function k(t,i){var o,n,e,s,a=k.epsilon||1e-6,r=[],h=t;"object"===(void 0===h?"undefined":x(h))&&"number"==typeof i&&(i=i=h);"number"==typeof i?e=(o=i)*o+(n=arguments[2])*n:(o=i.x,n=i.y,e=i.length2());var c=n*Math.sqrt(e-h*h),u=Math.acos((-h*o+c)/e),p=Math.acos((-h*o-c)/e),l=h*Math.cos(u),f=h*Math.sin(u),y=h*Math.cos(p),d=h*Math.sin(p);s=new w(o+y,n+d),r.push(s);var v=s.length2();s=new w(o+l,n-f),r.push(s);var g=s.length2();if(Math.abs(v-g)<a)return r;s=new w(o+y,n-d),r.push(s);var b=s.length2();if(Math.abs(g-b)<a)return[s,r[1]];if(Math.abs(v-b)<a)return[r[0],s];s=new w(o+l,n+f),r.push(s);var m=s.length2();return Math.abs(b-m)<a?[r[2],s]:Math.abs(g-m)<a?[r[1],s]:Math.abs(v-m)<a?[r[0],s]:r}var n=function(){function o(t){e(this,o);var i={position:new w,distance:100,diffuse:.8};this.options=Object.assign(i,t)}return s(o,[{key:"render",value:function(){}},{key:"mask",value:function(t){var i=this._getVisibleMaskCache();t.drawImage(i.canvas,Math.round(this.options.position.x-i.w/2),Math.round(this.options.position.y-i.h/2))}},{key:"bounds",value:function(){return{topleft:new w(this.options.position.x-this.options.distance,this.options.position.y-this.options.distance),bottomright:new w(this.options.position.x+this.options.distance,this.options.position.y+this.options.distance)}}},{key:"center",value:function(){return new w(this.options.distance,this.options.distance)}},{key:"forEachSample",value:function(t){t(this.options.position)}},{key:"_getVisibleMaskCache",value:function(){var t=Math.floor(1.4*this.options.distance),i=""+t;if(this.vismaskhash!=i){this.vismaskhash=i;var o=this._vismaskcache=r("vm"+this.id,2*t,2*t),n=o.ctx.createRadialGradient(t,t,0,t,t,t);n.addColorStop(0,"rgba(0,0,0,1)"),n.addColorStop(1,"rgba(0,0,0,0)"),o.ctx.fillStyle=n,o.ctx.fillRect(0,0,o.w,o.h)}return this._vismaskcache}},{key:"_getHashCache",value:function(){return[this.options.distance,this.options.diffuse].toString()}}]),o}(),c=function(){function o(t){e(this,o);var i={light:new n,objects:[]};this.options=Object.assign(i,this.options),this.options=Object.assign(this.options,t)}return s(o,[{key:"createCache",value:function(t,i){this._cache=r("lc",t,i),this._castcache=r("lcc",t,i)}},{key:"cast",value:function(t){var o=this.options.light,i=o.samples,n=this._castcache,e=n.ctx;e.clearRect(0,0,n.w,n.h),e.fillStyle="rgba(0,0,0,"+Math.round(100/i)/100+")";var s=o.bounds(),a=this.options.objects;o.forEachSample(function(i){for(var t=0,o=a.length;t<o;++t)if(a[t].contains(i))return void e.fillRect(s.topleft.x,s.topleft.y,s.bottomright.x-s.topleft.x,s.bottomright.y-s.topleft.y);a.forEach(function(t){t.cast(e,i,s)})}),a.forEach(function(t){var i=void 0===t.diffuse?.8:t.diffuse;i*=o.diffuse,e.fillStyle="rgba(0,0,0,"+(1-i)+")",e.beginPath(),t.path(e),e.fill()}),t.drawImage(n.canvas,0,0)}},{key:"compute",value:function(t,i){this._cache&&this._cache.w==t&&this._cache.h==i||this.createCache(t,i);var o=this._cache.ctx,n=this.options.light;o.save(),o.clearRect(0,0,o.canvas.width,o.canvas.height),n.render(o),o.globalCompositeOperation="destination-out",this.cast(o),o.restore()}},{key:"render",value:function(t){t.drawImage(this._cache.canvas,0,0)}},{key:"getCanvas",value:function(){return this._cache.canvas}}]),o}(),u=function(t){function o(t){e(this,o);var i=a(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return i.options=Object.assign({id:0,color:"rgba(250,220,150,0.8)",radius:0,samples:1,angle:0,roughness:0},i.options),i.options=Object.assign(i.options,t),i}return i(o,n),s(o,[{key:"_getHashCache",value:function(){return[this.options.color,this.options.distance,this.options.diffuse,this.options.angle,this.options.roughness,this.options.samples,this.options.radius].toString()}},{key:"center",value:function(){return new w((1-Math.cos(this.options.angle)*this.options.roughness)*this.options.distance,(1+Math.sin(this.options.angle)*this.options.roughness)*this.options.distance)}},{key:"bounds",value:function(){var t=new w(Math.cos(this.options.angle),-Math.sin(this.options.angle)).mul(this.options.roughness*this.options.distance);return{topleft:new w(this.options.position.x+t.x-this.options.distance,this.options.position.y+t.y-this.options.distance),bottomright:new w(this.options.position.x+t.x+this.options.distance,this.options.position.y+t.y+this.options.distance)}}},{key:"mask",value:function(t){var i=this._getVisibleMaskCache(),o=new w(Math.cos(this.options.angle),-Math.sin(this.options.angle)).mul(this.options.roughness*this.options.distance);t.drawImage(i.canvas,Math.round(this.options.position.x+o.x-i.w/2),Math.round(this.options.position.y+o.y-i.h/2))}},{key:"_getGradientCache",value:function(t){var i=this._getHashCache();if(this._cacheHashcode==i)return this._gcache;this._cacheHashcode=i;var o=Math.round(this.options.distance),n=2*o,e=r("gc"+this.id,n,n),s=e.ctx.createRadialGradient(t.x,t.y,0,o,o,o);return s.addColorStop(Math.min(1,this.options.radius/this.options.distance),this.options.color),s.addColorStop(1,h(this.options.color,0)),e.ctx.fillStyle=s,e.ctx.fillRect(0,0,e.w,e.h),this._gcache=e}},{key:"render",value:function(t){var i=this.center(),o=this._getGradientCache(i);t.drawImage(o.canvas,Math.round(this.options.position.x-i.x),Math.round(this.options.position.y-i.y))}}]),o}(),p=function(){function i(t){e(this,i);this.options=Object.assign({diffuse:.8},t),this.uniqueId=0}return s(i,[{key:"cast",value:function(){}},{key:"path",value:function(){}},{key:"bounds",value:function(){return{topleft:new w,bottomright:new w}}},{key:"contains",value:function(){return!1}}]),i}(),l=function(t){function n(t){e(this,n);var i=a(this,(n.__proto__||Object.getPrototypeOf(n)).call(this)),o={center:new w,radius:20};return i.options=Object.assign(o,i.options),i.options=Object.assign(i.options,t),i}return i(n,p),s(n,[{key:"cast",value:function(t,i,o){var n=this.options.center,e=n.sub(i),s=k(this.options.radius,e),a=s[0],r=s[1],h=a.add(i),c=r.add(i),u=(o.bottomright.x-o.topleft.x+(o.bottomright.y-o.topleft.y))/2;e=e.normalize().mul(u),a=a.normalize().mul(u),r=r.normalize().mul(u);var p=h.add(e),l=c.add(e),f=h.add(a),y=c.add(r),d=Math.atan2(e.x,-e.y);t.beginPath(),v(t,[c,y,l,p,f,h],!0),t.arc(n.x,n.y,this.options.radius,d,d+Math.PI),t.fill()}},{key:"path",value:function(t){t.arc(this.options.center.x,this.options.center.y,this.options.radius,0,o)}},{key:"bounds",value:function(){return{topleft:new w(this.options.center.x-this.options.radius,this.options.center.y-this.options.radius),bottomright:new w(this.options.center.x+this.options.radius,this.options.center.y+this.options.radius)}}},{key:"contains",value:function(t){return t.dist2(this.options.center)<this.options.radius*this.options.radius}}]),n}(),f=function(t){function o(t){e(this,o);var i=a(this,(o.__proto__||Object.getPrototypeOf(o)).call(this));return i.options=Object.assign({points:[]},i.options),i.options=Object.assign(i.options,t),i}return i(o,p),s(o,[{key:"bounds",value:function(){for(var t=this.options.points[0].copy(),i=t.copy(),o=1,n=this.options.points.length;o<n;++o){var e=this.options.points[o];e.x>i.x&&(i.x=e.x),e.y>i.y&&(i.y=e.y),e.x<t.x&&(t.x=e.x),e.y<t.y&&(t.y=e.y)}return{topleft:t,bottomright:i}}},{key:"contains",value:function(t){var i,o=this.options.points,n=o.length,e=n-1,s=t.x,a=t.y,r=!1;for(i=0;i<n;i++)(o[i].y<a&&o[e].y>=a||o[e].y<a&&o[i].y>=a)&&(o[i].x<=s||o[e].x<=s)&&o[i].x+(a-o[i].y)/(o[e].y-o[i].y)*(o[e].x-o[i].x)<s&&(r=!r),e=i;return r}},{key:"path",value:function(t){v(t,this.options.points)}},{key:"cast",value:function(p,l,t){var f=(t.bottomright.x-t.topleft.x+(t.bottomright.y-t.topleft.y))/2;this._forEachVisibleEdges(l,t,function(t,i,o,n,e){var s=o.inv().dot(e)/e.length2(),a=(s<0?t:1<s?i:t.add(e.mul(s))).sub(l);a=a.normalize().mul(f),o=o.normalize().mul(f),n=n.normalize().mul(f);var r=t.add(a),h=i.add(a),c=t.add(o),u=i.add(n);p.beginPath(),v(p,[t,i,u,h,r,c]),p.fill()})}},{key:"_forEachVisibleEdges",value:function(t,i,o){for(var n,e=this.options.points[this.options.points.length-1],s=0,a=this.options.points.length;s<a;++s,e=n)if(n=this.options.points[s],e.inBound(i.topleft,i.bottomright)){var r=e.sub(t),h=n.sub(t),c=n.sub(e);new w(c.y,-c.x).dot(r)<0&&o(e,n,r,h,c)}}}]),o}(),y=function(t){function n(t){e(this,n);var i=a(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t)),o={topleft:new w,bottomright:new w};return i.options=Object.assign(o,i.options),i.options=Object.assign(i.options,t),i.syncFromTopleftBottomright(),i}return i(n,f),s(n,[{key:"syncFromTopleftBottomright",value:function(){var t=this.options.topleft,i=new w(this.options.bottomright.x,this.options.topleft.y),o=this.options.bottomright,n=new w(this.options.topleft.x,this.options.bottomright.y);this.options.points=[t,i,o,n]}},{key:"fill",value:function(t){var i=this.options.points[0].x,o=this.options.points[0].y;t.rect(i,o,this.options.points[2].x-i,this.options.points[2].y-o)}}]),n}(),d=function(t){function n(t){e(this,n);var i=a(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,t)),o={a:new w,b:new w};return i.options=Object.assign(o,i.options),i.options=Object.assign(i.options,t),i.syncFromAB(),i}return i(n,f),s(n,[{key:"syncFromAb",value:function(){this.options.points=[this.options.a,this.options.b]}}]),n}();t.Vec2=w,t.Lighting=c,t.Lamp=u,t.DiscObject=l,t.RectangleObject=y,t.LineObject=d,t.PolygonObject=f,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
